apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-driver-modern-ebpf
  namespace: falco
  labels:
    app.kubernetes.io/name: falco-driver-modern-ebpf
    app.kubernetes.io/version: "0.41.1"
data:
  # --- falco.yaml ---
  # The following configs deviate from the default falco.yaml
  # `json_output` is enabled
  # `json_include_output_property` set to false
  # `json_include_tags_property` set to false
  # `metrics` is enabled w/ Prometheus as output sink; verify via `curl http://127.0.0.1:8765/metrics`
  # `priority` set to "info" instead of "debug"
  # `webserver` is enabled
  falco.yaml: |-
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/rules.d
    engine:
      kind: modern_ebpf
      kmod:
        buf_size_preset: 4
        drop_failed_exit: false
      ebpf:
        probe: ${HOME}/.falco/falco-bpf.o
        buf_size_preset: 4
        drop_failed_exit: false
      modern_ebpf:
        cpus_for_each_buffer: 2
        buf_size_preset: 4
        drop_failed_exit: false
      replay:
        capture_file: ""
      gvisor:
        config: ""
        root: ""
    load_plugins: [container]
    plugins:
      - name: container
        # path to the plugin .so file
        library_path: libcontainer.so
        init_config:
          label_max_len: 100 # (optional, default: 100; container labels larger than this won't be reported)
          with_size: false # (optional, default: false; whether to enable container size inspection, which is inherently slow)
          hooks: ['create', 'start'] # (optional, default: 'create'. Some fields might not be available in create hook, but we are guaranteed that it gets triggered before first process gets started)
          engines:
            docker:
              enabled: true
              sockets: ['/var/run/docker.sock']
            podman:
              enabled: true
              sockets: ['/run/podman/podman.sock', '/run/user/1000/podman/podman.sock']
            containerd:
              enabled: true
              sockets: ['/run/containerd/containerd.sock']
            cri:
              enabled: true
              sockets: ['/run/crio/crio.sock']
            lxc:
              enabled: false
            libvirt_lxc:
              enabled: false
            bpm:
              enabled: false 
    watch_config_files: true
    time_format_iso_8601: false
    priority: info
    json_output: true
    json_include_output_property: false
    json_include_tags_property: false
    buffered_outputs: false
    rule_matching: first
    outputs_queue:
      capacity: 0
    stdout_output:
      enabled: true
    syslog_output:
      enabled: true
    file_output:
      enabled: false
      keep_alive: false
      filename: /tmp/falco/events.jsonl
    webserver:
      enabled: true
      threadiness: 0
      listen_port: 8765
      listen_address: 0.0.0.0
      k8s_healthz_endpoint: /healthz
      prometheus_metrics_enabled: true
      ssl_enabled: false
      ssl_certificate: /etc/falco/falco.pem
    log_stderr: true
    log_syslog: true
    log_level: info
    libs_logger:
      enabled: false
      severity: debug
    output_timeout: 2000
    syscall_event_timeouts:
      max_consecutives: 1000
    metrics:
      enabled: true
      interval: 30m
      output_rule: false
      # output_file: /tmp/stats/falco_stats.jsonl
      rules_counters_enabled: true
      resource_utilization_enabled: true
      state_counters_enabled: true
      kernel_event_counters_enabled: true
      kernel_event_counters_per_cpu_enabled: true
      libbpf_stats_enabled: true
      plugins_metrics_enabled: true
      jemalloc_stats_enabled: false
      convert_memory_to_mb: true
      include_empty_values: false
    base_syscalls:
      custom_set: []
      repair: false
