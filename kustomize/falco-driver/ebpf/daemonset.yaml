apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco-driver-ebpf
  namespace: falco
  labels:
    app.kubernetes.io/name: falco-driver-ebpf
    app.kubernetes.io/version: "0.37.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: falco-driver-ebpf
  template:
    metadata:
      labels:
        app.kubernetes.io/name: falco-driver-ebpf
    spec:
      nodeSelector:
        cncf-project-sub: "falco-driver-ebpf"
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      # todo @incertum upgrade to new tagged image after Falco 0.37.0 release
      - name: falco
        image: docker.io/falcosecurity/falco-no-driver:master
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          privileged: true
        env:
        - name: FALCO_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: HOST_ROOT
          value: /host
        - name: CONFIG_VERSION
          value: "0.1.0-alpha"
        # Override entrypoint and ad-hoc run preinit commands before starting Falco
        command: ["/bin/bash", "-c"]
        args:
        - |
          sysctl kernel.bpf_stats_enabled=1 || true &&
          apt-get update &&
          apt-get install -y logrotate htop jq procps &&
          mkdir -p /tmp/stats &&
          mkdir -p /tmp/falco &&
          touch /tmp/stats/falco_stats.jsonl &&
          touch /tmp/falco/events.jsonl &&
          logrotate -f /etc/falco/logrotate.conf &&
          export FALCO_HOSTNAME="${FALCO_HOSTNAME}_${CONFIG_VERSION}" &&
          /usr/bin/falco --cri /run/containerd/containerd.sock -pk --disable-cri-async
        volumeMounts:
        - mountPath: /etc/falco
          name: rulesfiles-install-dir
        - mountPath: /root/.falco
          name: root-falco-fs
        - mountPath: /host/proc
          name: proc-fs
        - mountPath: /host/dev
          name: dev-fs
        - mountPath: /host/etc
          name: etc-fs
        - mountPath: /host/run/containerd/containerd.sock
          name: containerd-socket
        - mountPath: /etc/falco/falco.yaml
          name: falco-yaml
          subPath: falco.yaml
        - mountPath: /etc/falco/logrotate.conf
          name: falco-yaml
          subPath: logrotate.conf
      initContainers:
      # todo @incertum upgrade to new tagged image after Falco 0.37.0 release
      - name: falco-driver-loader
        image: docker.io/falcosecurity/falco-driver-loader:master
        imagePullPolicy: IfNotPresent
        # args:
        #   - ebpf
        # todo we are still investigating driver-loader issues in general and better ways to support testing w/ minikube
        # consider below override experimental for now to support minikube testing as well
        command: ["/bin/bash", "-c"]
        args:
        - |
          if [ "$(ls -A ${HOST_ROOT}/usr/src/kernels/$(uname -r))" ]; then
              echo "RPM based distro"
              mkdir -p /usr/src/kernels/ && cp -r ${HOST_ROOT}/usr/src/kernels/$(uname -r) /usr/src/kernels/$(uname -r) &&
              /usr/bin/falcoctl driver config --type ebpf && /usr/bin/falcoctl driver install --compile=true --download=true
          elif [ "$(ls -A ${HOST_ROOT}/usr/src/linux-headers-$(uname -r))" ]; then
              echo "Ubuntu distro"
              cp -r $(ls -d ${HOST_ROOT}/usr/src/* | head -n 1) /usr/src/ &&
              cp -r $(ls -d ${HOST_ROOT}/usr/src/linux-headers-$(uname -r) | head -n 1) /usr/src/linux-headers-$(uname -r) &&
              /usr/bin/falcoctl driver config --type ebpf && /usr/bin/falcoctl driver install --compile=true --download=true
          fi
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /root/.falco
          name: root-falco-fs
        - mountPath: /host/proc
          name: proc-fs
          readOnly: true
        - mountPath: /host/dev
          name: dev-fs
          readOnly: true
        - mountPath: /host/boot
          name: boot-fs
          readOnly: true
        - mountPath: /host/lib/modules
          name: lib-modules
        - mountPath: /host/usr
          name: usr-fs
          readOnly: true
        - mountPath: /host/etc
          name: etc-fs
          readOnly: true
        env:
        - name: HOST_ROOT
          value: /host
      # todo @incertum upgrade to new tagged image after Falco 0.37.0 release
      - name: falcoctl-artifact-install
        image: docker.io/falcosecurity/falcoctl:0.6.2
        imagePullPolicy: IfNotPresent
        args: 
          - artifact
          - install
          - --verbose
        securityContext:
        volumeMounts:
        - mountPath: /plugins
          name: plugins-install-dir
        - mountPath: /rulesfiles
          name: rulesfiles-install-dir
        - mountPath: /etc/falcoctl
          name: falcoctl-config-volume
        env:
      volumes:
      - name: plugins-install-dir
        emptyDir: {}
      - name: rulesfiles-install-dir
        emptyDir: {}
      - name: root-falco-fs
        emptyDir: {}  
      - name: boot-fs
        hostPath:
          path: /boot
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: usr-fs
        hostPath:
          path: /usr
      - name: etc-fs
        hostPath:
          path: /etc
      - name: dev-fs
        hostPath:
          path: /dev
      - name: containerd-socket
        hostPath:
          path: /run/containerd/containerd.sock
      - name: proc-fs
        hostPath:
          path: /proc
      - name: falcoctl-config-volume
        configMap: 
          name: falco-falcoctl
          items:
          - key: falcoctl.yaml
            path: falcoctl.yaml
      - name: falco-yaml
        configMap:
          name: falco-driver-ebpf
          items:
          - key: falco.yaml
            path: falco.yaml
          - key: logrotate.conf
            path: logrotate.conf
  updateStrategy:
    type: RollingUpdate
